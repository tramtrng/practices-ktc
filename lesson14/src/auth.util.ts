import { useAuthStore } from "./useAuthStore";
import type { PermissionCheckMode } from "./auth.type";
import { ROLES } from "./auth.type";

// Ki·ªÉm tra user c√≥ role c·ª• th·ªÉ kh√¥ng
export const hasAnyRoles = (roles: string[]): boolean => {
  const { loggedInUser } = useAuthStore.getState();
  
  if (!loggedInUser?.roles) return false;
  
  return loggedInUser.roles.some(role => roles.includes(role.name));
};

// Ki·ªÉm tra c√≥ quy·ªÅn Administrator kh√¥ng
export const isAdmin = (): boolean => {
  return hasAnyRoles([ROLES.ADMINISTRATORS]);
};

// Ki·ªÉm tra ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
export const isAuthenticated = (): boolean => {
  const { loggedInUser, access_token } = useAuthStore.getState();
  return !!(loggedInUser && access_token);
};

// Ki·ªÉm tra role user c√≥ ƒë∆∞·ª£c ph√©p truy c·∫≠p kh√¥ng
export const isAllowAccessForRoles = (
  userRoles: Array<{id: string | number, name: string}>, 
  allowedRoles: string[]
): boolean => {
  return userRoles.some(role => allowedRoles.includes(role.name));
};

// Ki·ªÉm tra quy·ªÅn h·∫°n c·ª• th·ªÉ
export const hasPermissions = (
  permissions: string[], 
  mode: PermissionCheckMode = "any"
): boolean => {
  const { loggedInUser } = useAuthStore.getState();
  
  if (!loggedInUser?.roles) return false;
  
  // Admin c√≥ t·∫•t c·∫£ quy·ªÅn
  if (isAdmin()) return true;
  
  // Thu th·∫≠p t·∫•t c·∫£ permissions t·ª´ roles
  const userPermissions: string[] = [];
  
  loggedInUser.roles.forEach(role => {
    // N·∫øu role c√≥ field permissions
    if ('permissions' in role && Array.isArray((role as any).permissions)) {
      userPermissions.push(...(role as any).permissions);
    }
    
    // Map role name th√†nh permissions
    switch (role.name) {
      case ROLES.ADMINISTRATORS:
        userPermissions.push('task.create', 'task.update', 'task.delete', 'task.read', 'user.manage');
        break;
      case ROLES.MANAGERS:
        userPermissions.push('task.create', 'task.update', 'task.read');
        break;
      case ROLES.USERS:
        userPermissions.push('task.read');
        break;
      default:
        break;
    }
  });
  
  // Lo·∫°i b·ªè tr√πng l·∫∑p
  const uniquePermissions = [...new Set(userPermissions)];
  
  // Ki·ªÉm tra theo mode
  if (mode === "all") {
    return permissions.every(permission => uniquePermissions.includes(permission));
  }
  
  return permissions.some(permission => uniquePermissions.includes(permission));
};

export const getCurrentUser = () => {
  const { loggedInUser } = useAuthStore.getState();
  return loggedInUser;
};

// Debug th√¥ng tin auth (ch·ªâ console.log)
export const debugAuthInfo = () => {
  if (process.env.NODE_ENV === 'development') {
    const { loggedInUser, access_token } = useAuthStore.getState();
    console.group('üîê Th√¥ng tin Auth');
    console.log('User:', loggedInUser?.email);
    console.log('C√≥ Token:', !!access_token);
    console.log('Roles:', loggedInUser?.roles.map(r => r.name));
    console.log('L√† Admin:', isAdmin());
    console.log('Quy·ªÅn:', hasPermissions(['task.create', 'task.update']));
    console.groupEnd();
  }
};